% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parquet_parallel_gam.R
\name{parquet_parallel_gam}
\alias{parquet_parallel_gam}
\title{Parallelized GAM Model Fitting for Parquet Datasets}
\usage{
parquet_parallel_gam(
  parquet_file,
  temp_dir = "./tidy_objects",
  single_model_cores = 1,
  dt_cores = 1,
  mc.cores = 1,
  clear_results = F,
  spec_cell_ids = NULL,
  cutpoint = 0
)
}
\arguments{
\item{parquet_file}{A file path to the parquet dataset to be used for the model fitting.}

\item{temp_dir}{A directory path to store temporary results. Defaults to `./tidy_objects`.}

\item{single_model_cores}{An integer specifying the number of CPU cores to use for each GAM model. Defaults to 1.}

\item{dt_cores}{An integer specifying the number of threads for `data.table` operations. Defaults to 1.}

\item{mc.cores}{An integer specifying the number of cores to use for parallel processing. If `mc.cores` is 1, `pbapply::pblapply()` is used; otherwise, `parallel::mclapply()` is used.}

\item{clear_results}{A logical value. If TRUE, clears any existing results in the `temp_dir` before processing. Defaults to FALSE.}

\item{cutpoint}{A value to filter the cell data frame, removing points below this mark.}
}
\value{
A data.table containing the summary of fitted models for each cell, including coefficients, standard errors, AIC values, and convergence status.
}
\description{
This function fits Generalized Additive Models (GAMs) to a parquet dataset, grouped by a specific cell identifier.
The computation is parallelized for efficiency, with options for multi-core processing and clearing previous results.
}
\details{
The function processes parquet datasets in parallel by fitting a GAM for each unique `lasso_cell_id`. 
It applies corrections to each sample in the dataset using the `mnase_correct_by_sample` function before modeling the effect of treatment. 
The model is fitted using a Negative Binomial family with an identity link. 
Results for each `lasso_cell_id` are stored in the `temp_dir` as CSV files, and previously stored results can be cleared if `clear_results` is set to TRUE.

Parallelization is handled by `pbapply::pblapply()` or `parallel::mclapply()` depending on the number of cores specified.
}
\examples{
\dontrun{
  results <- parquet_parallel_gam(parquet_file = "my_data.parquet", temp_dir = "./results", single_model_cores = 2, dt_cores = 4, mc.cores = 4)
}

}
